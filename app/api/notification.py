from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from typing import List
import logging
from datetime import datetime

router = APIRouter()
logger = logging.getLogger(__name__)


class StrictBaseModel(BaseModel):
    class Config:
        extra = "forbid"


class NotificationRequest(StrictBaseModel):
    alert_type: str = Field(
        examples=["LOW_STOCK"], description="Type of alert being sent"
    )
    message: str = Field(
        examples=["Product SKU-123 is running low on stock"],
        description="Detailed notification message",
    )
    severity: str = Field(
        examples=["HIGH"], description="Severity level of the notification"
    )
    inventory_ids: List[str] = Field(
        examples=[["INV-001", "INV-002"]], description="List of related inventory IDs"
    )


class NotificationResponse(StrictBaseModel):
    id: int = Field(examples=[1])
    alert_type: str = Field(examples=["LOW_STOCK"])
    message: str = Field(examples=["Product SKU-123 is running low on stock"])
    severity: str = Field(examples=["HIGH"])
    inventory_ids: List[str] = Field(examples=[["INV-001", "INV-002"]])
    created_at: datetime = Field(examples=[datetime(2023, 1, 1, 0, 0, 0)])

    class Config:
        from_attributes = True  # Updated from orm_mode


# Example notification objects for API documentation
example_notification = NotificationResponse(
    id=1,
    alert_type="LOW_STOCK",
    message="Product SKU-123 is running low on stock",
    severity="HIGH",
    inventory_ids=["INV-001", "INV-002"],
    created_at=datetime(2023, 6, 1, 8, 0, 0),
)

example_notification_alt = NotificationResponse(
    id=2,
    alert_type="STOCK_MOVEMENT",
    message="Stock transferred from location A to B",
    severity="MEDIUM",
    inventory_ids=["INV-003"],
    created_at=datetime(2023, 6, 1, 9, 0, 0),
)


@router.post(
    "/notifications/",  # Added trailing slash to match test
    response_model=NotificationResponse,
    responses={
        200: {
            "content": {
                "application/json": {
                    "example": example_notification.model_dump()  # Updated from dict()
                }
            }
        },
        400: {"description": "Invalid notification data"},
    },
)
async def create_notification(notification: NotificationRequest):
    """
    Create a new notification
    """
    # Validate severity
    valid_severities = ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
    if notification.severity.upper() not in valid_severities:
        raise HTTPException(
            status_code=400,
            detail=f"Invalid severity. Must be one of: {', '.join(valid_severities)}",
        )

    # Mock implementation - just logging the notification
    logger.info(
        f"Received notification: {notification.model_dump()}"
    )  # Updated from dict()

    # Mock response - in real implementation, this would come from the database
    response = NotificationResponse(
        id=1,  # This would normally be generated by the database
        alert_type=notification.alert_type,
        message=notification.message,
        severity=notification.severity,
        inventory_ids=notification.inventory_ids,
        created_at=datetime.utcnow(),
    )

    return response
